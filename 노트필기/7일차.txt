[추상클래스와 인터페이스]
1. 추상클래스
- 의미: 불완전한 클래스
- 정의하는 법: 추상메소드를 단 하나라도 두면 추상 클래스가 됨.
		 abstract 파일명
- 사용 이유: 자식 클래스에게 구현을 강제하기 위함.
- 한계: 다중 상속 불가로 인해 복합적인 객체를 표현하는데 제한이 있음.
2. 인터페이스
- 의미: 클래스가 아닌 추상메소드로만 이루어진 객체(기능만을 모아둔 객체)
- 정의하는 법: 인터페이스는 추상메소드만 100%보유하고 있으므로 
		 interface 파일명, 파일명..
3. 추상 클래스와 인터페이스의 주요활용
- is a 관계 성립
ig) class SmartPhone extends Phone implements GameMachine, TV, Computer{
}
class SmartPhone is a Phone is a GameMachine, TV, Computer
결론: 현실에서의 다중상속을 인터페이스를 통해 구현한 것
4. 수식자의 유형 
 - static 
 - final : 
	 클래스 : 상속불허(대가 여기서 끊김)
	 메서드 : 오버라이딩 불허
	 변수 : 값 변경 불허 (상수? X)
 - abstract 

5. 상수의 요건
 - 값이 변경되면 안됨(final) + 모든 인스턴스간 그 값이 공유(static) + 접근제한 X (public)
  final int x=6; (지역변수로 사용가능)
  public static final X =6 (상수는 대문자로 표기)- 멤버변수에 위치

[ String 클래스 ]
String에 의해 생성된 문자열을 변경이 불가능하므로 "문자열 상수"라는 용어를 쓴다 
일단 생성된 스트링 객체는 immutable(변경불가) 하다!!!

- 너무나 많이 쓰는 자료형이므로, 마치 기본 자료형처럼 메모리에 올리는 법을지원 
  ex)  String s="apple"; <-- 마치 기본 자료형 올리듯...
        이와 같은 선언 방식을 가리켜 암시적,묵시적 생성법 상수풀

- 상수풀(Constant Pool): 중복된 문자열 객체를 생성하지 않음 , 따라서 묵시적 생성법으로 생성되는 
                                  문자열 객체가 중복되지 않도록 처리 

- 메모리 효율성 
  묵시적 vs 명시적 
  묵시적 : String s = "korea";
  명시적 : String s = new String("korea");

- 스트링 객체간의  == 연산자 사용은 내용? 주소값? 

   s1==s2  <--- 결론:  String 은 객체이므로 주소값비교가 된다..
                        암시적생성법 : 상수풀의 같은 객체의 주소 
			(그러다 보니 내용비교한것과 같은 결과가 나오는 것 뿐임)

			명시적생성법 : 힙의 서로 다른 주소값 

   equals() 메서드를 이용하면 내용비교가 가능함 

[자바의 api문서]

[GUI 프로그래밍]
현재까지는 cmd 모드에서 개발을 진행.(직관성x, 재미 x, 불친절)
Graphical User Interface
모든 그래픽 처리는  Window 안에서 그려진다. 그래서 Window Programming이라고도 함.
AWT/Swing